{"version":3,"sources":["Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","React","Component","App","state","topText","bottomText","memeImgURL","memeImages","changeHandler","bind","submitHandler","fetch","then","response","json","setState","data","memes","console","log","event","preventDefault","target","name","value","this","idx","Math","floor","random","length","newImg","url","onSubmit","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+MAgBeA,E,uKAZP,OACI,gCACI,yBAAKC,UAAU,UACX,yBAAKC,IAAI,qEAAqEC,IAAI,aAClF,oD,GANCC,IAAMC,WCuEZC,E,kDArEd,aAAc,IAAD,8BACZ,gBACKC,MAAQ,CACZC,QAAS,GACTC,WAAY,GACZC,WAAY,iCACZC,WAAY,IAEb,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBATT,E,gEAYO,IAAD,OAClBE,MAAM,qCACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACL,EAAKE,SAAS,CAACR,WAAYM,EAASG,KAAKC,QACzCC,QAAQC,IAAI,EAAKhB,MAAMI,WAAW,S,oCAIvBa,GACbA,EAAMC,iBADa,MAEGD,EAAME,OAArBC,EAFY,EAEZA,KAAMC,EAFM,EAENA,MACbC,KAAKV,SAAL,eAAgBQ,EAAOC,M,oCAGVJ,GACbA,EAAMC,iBACN,IAAIK,EAAMC,KAAKC,MAAMD,KAAKE,SAAWJ,KAAKtB,MAAMI,WAAWuB,QACrDC,EAASN,KAAKtB,MAAMI,WAAWmB,GAAKM,IAC1CP,KAAKV,SAAS,CAACT,WAAYyB,M,+BAK3B,OACC,6BACC,kBAAC,EAAD,MACA,0BAAMlC,UAAU,YAAYoC,SAAUR,KAAKf,eAC1C,2BACCwB,KAAK,OACLC,YAAY,WACZZ,KAAK,UACLC,MAAOC,KAAKtB,MAAMC,QAClBgC,SAAUX,KAAKjB,gBAEhB,2BACC0B,KAAK,OACLC,YAAY,cACZZ,KAAK,aACLC,MAAOC,KAAKtB,MAAME,WAClB+B,SAAUX,KAAKjB,gBAEhB,6CAID,yBAAKX,UAAU,QACd,wBAAIA,UAAU,OAAO4B,KAAKtB,MAAMC,SAChC,wBAAIP,UAAU,UAAU4B,KAAKtB,MAAME,YACnC,yBAAKP,IAAK2B,KAAKtB,MAAMG,WAAYP,IAAI,gB,GA9DxBC,IAAMC,WCSJoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.fa87a565.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Header extends React.Component{\r\n    render(){\r\n        return (\r\n            <header>\r\n                <div className=\"header\">\r\n                    <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface-PNG.png\" alt=\"Problems\"></img>\r\n                    <h1>Meme Generator</h1>\r\n                </div>\r\n                \r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from 'react';\nimport Header from './Header.js'\n\nclass App extends React.Component {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state = {\n\t\t\ttopText: \"\",\n\t\t\tbottomText: \"\",\n\t\t\tmemeImgURL: \"https://i.imgflip.com/26am.jpg\",\n\t\t\tmemeImages: []\n\t\t}\n\t\tthis.changeHandler = this.changeHandler.bind(this)\n\t\tthis.submitHandler = this.submitHandler.bind(this)\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch(\"https://api.imgflip.com/get_memes\")\n\t\t\t.then(response => response.json())\n\t\t\t.then(response => {\n\t\t\t\tthis.setState({memeImages: response.data.memes})\n\t\t\t\tconsole.log(this.state.memeImages[1])\n\t\t\t})\n\t}\n\t\n\tchangeHandler(event){\n\t\tevent.preventDefault()\n\t\tconst {name, value} = event.target\n\t\tthis.setState({[name]: value})\n\t}\n\n\tsubmitHandler(event){\n\t\tevent.preventDefault()\n\t\tvar idx = Math.floor(Math.random() * this.state.memeImages.length)\n\t\tconst newImg = this.state.memeImages[idx].url\n\t\tthis.setState({memeImgURL: newImg})\n\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Header />\n\t\t\t\t<form className=\"meme-form\" onSubmit={this.submitHandler}>\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tplaceholder=\"top text\"\n\t\t\t\t\t\tname=\"topText\"\n\t\t\t\t\t\tvalue={this.state.topText}\n\t\t\t\t\t\tonChange={this.changeHandler}\n\t\t\t\t\t></input>\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype=\"text\" \n\t\t\t\t\t\tplaceholder=\"bottom text\"\n\t\t\t\t\t\tname=\"bottomText\"\n\t\t\t\t\t\tvalue={this.state.bottomText}\n\t\t\t\t\t\tonChange={this.changeHandler}\n\t\t\t\t\t></input>\n\t\t\t\t\t<button>Generate</button>\n\n\t\t\t\t\t\n\t\t\t\t</form>\n\t\t\t\t<div className=\"meme\">\n\t\t\t\t\t<h1 className=\"top\">{this.state.topText}</h1>\n\t\t\t\t\t<h1 className=\"bottom\">{this.state.bottomText}</h1>\n\t\t\t\t\t<img src={this.state.memeImgURL} alt=\"error\"></img>\n\t\t\t\t</div>\n\t\t\t</div> \n\t\t\t\n\t\t)\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}